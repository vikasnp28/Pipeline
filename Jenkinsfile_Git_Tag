#!/usr/bin/env groovy

/* Import the below shared library stored in this GitHub repository:
        https://github.dxc.com/Platform-DXC/devops-jenkins-sharedlibs

    This library contains functions for parsing the CHANGELOG.md file
*/
@Library('pdxc-pipeline-lib@master')_

static String ChangeLogVersion = ""
static String NF = "1.0.0"
static String VERSION = ""

// this is required for global var notation @Field
import groovy.transform.Field

// Global variables for external Groovy scripts
@Field DSCScript
@Field GitScript
@Field GUIScript
@Field TerraformScript

@Field SetupProfileStage
@Field TriggerPipelineCheckStage
@Field CopyConfigFilesStage
@Field DefineVariablesStage
@Field DetokeniseStage
@Field DestroyAllStage
@Field ProvisionStorageAccountStage

@Field CQTerraformLintStage
@Field CQTerraformFormattingStage
@Field CQCheckEmailStage
@Field CQpssa

@Field CommonGlobalScript
@Field LoadScript

def loadScripts()
{
    // Once repositories are downloaded, import required scripts. Note each one must be
    // declared as a global variable above so they can be used throughout this file

    // This must be the first groovy script to load in case the vars are required in other Groovy scripts.
    CommonGlobalScript = load "${Globals.JenkinsRootFolder}/Groovy/CommonGlobal.groovy"
    // Helper Groovy functions
    DSCScript = load "${Globals.JenkinsRootFolder}/Groovy/DSC.groovy"
    GitScript = load "${Globals.JenkinsRootFolder}/Groovy/Git.groovy"
    GUIScript = load "${Globals.JenkinsRootFolder}/Groovy/GUI.groovy"
    TerraformScript = load "${Globals.JenkinsRootFolder}/Groovy/Terraform.groovy"

    // Stage related Groovy functions
    SetupProfileStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_SetupProfile.groovy"
    CopyConfigFilesStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_CopyConfigFiles.groovy"
    DetokeniseStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_Detokenise.groovy"
    DestroyAllStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_DestroyAll.groovy"
    ProvisionStorageAccountStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_ProvisionStorageAccount.groovy"
    GitHubReleaseStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_GitHubRelease.groovy"

    // Code Quality related Groovy functions
    CQTerraformLintStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_CQTerraformLint.groovy"
    CQTerraformFormattingStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_CQTerraformFormatting.groovy"
    CQCheckEmailStage = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_CQCheckEmail.groovy"
    CQpssa = load "${Globals.JenkinsRootFolder}/Groovy/stages/stage_CQpssa.groovy"

    // Local groovy scripts
    TriggerPipelineCheckStage = load "${Globals.RootPipelineFolder}/Groovy/stage_PipelineTriggerCheck.groovy"
    DefineVariablesStage = load "${Globals.RootPipelineFolder}/Groovy/stage_DefineVariables.groovy"
}

//###############################################################################################################################
//                  WALDO PIPELINE FOLDER STRUCTURE
// NOTE: The Waldo Framework repo contains a folder 'Pipeline' where all Pipeline related files are stored.
// Ensure all paths relating to pipeline files have 'Pipeline' after Workspace. This is so that the workspace passed in to all files
// from the Jenkins file already have the Pipeline subfolder path, to avoid having to modify paths in the rest of the files.
//###############################################################################################################################

// **************************************************************
// Globals
// **************************************************************
// Define global variables with defaults, some of which are set later
// using data retrieved from the (GUI) Configuration Database. The variable
// setting must run after the branch specific configuration file has
// been copied
// Use @Field notation to allow access/modification in functions
class Globals
{
    // The below variables are pipeline specific hence declared here
    static String ExecuteStepAzureAutomation = "no"
    static String ExecuteStepNetwork = "no"
    static String ExecuteStepDC = "no"
    static String ExecuteStepSQL = "no"
    static String ExecuteStepMaster          = "no"
    static String ExecuteStepSharePoint      = "no"

    static String ExecuteLoadDSCDC = "no"
    static String ExecuteLoadDSCSQL = "no"
    static String ExecuteLoadDSCMaster       = "no"
    static String ExecuteLoadDSCSharePoint   = "no"

    // Prefixes for each type of VM, assigned in Stage 1.3
    static String VMPrefixDC = ""
    static String VMPrefixSQL = ""
    static String VMPrefixMaster = ""
    static String VMPrefixSharePoint = ""

    // Number of Domain Controllers. Default for Waldo is two, one for Master Domain and one for Resource Domain.
    static Integer NumberOfDCs = 2

    // The below variables are not pipeline specific but here as they are regularly passed into Groovy functions

    // Global variable for Root folder where automation related code resides.
    // Typically the root of the GitHub repo
    static String RootPipelineFolder = ""
    static String RootFolder = ""
	
    static String PipelineFolder = ""

    // Global variables for folders where Jenkins related script files reside.
    static String JenkinsRootFolder = ""
    static String JenkinsPowerShellFolder = ""

    // this is the number of times to run a stage if it fails, this is, including the first run
    static Integer NumberOfRuns = 1

    // Name of Azure Automation Account, assigned in Stage 1.3
    static String AutomationAccountName = ""

    static String Domain = ""
    static String MasterDomain = ""
}

// **************************************************************

pipeline {
    agent {
        docker {
            image "docker.dxc.com/wm-docker/powershelldocker:1.0.0"
            registryUrl "https://docker.dxc.com"
            registryCredentialsId "PIPELINE_DOCKER_ACCOUNT"
        }
    }

    // Environment variables
    environment {

        TF_VAR_REGION               = "southcentralus"

        /*
            These secrets are:
                - stored within Jenkins credential store.
                - unqiue to a branch, hence the the appending of the branch_name
        */

        /*
        * Account details for Domain & VM admin
          Uses a Jenkins credential called "TF_VAR_ADMIN_ACCOUNT_<branch name>" and creates environment variables:
          "$TF_VAR_ADMIN_ACCOUNT" will contain string "USR:PSW"
          "$TF_VAR_ADMIN_ACCOUNT_USR" will contain string for Username
          "'$TF_VAR_ADMIN_ACCOUNT_PSW'" will contain string for Password
        */
        // Admin Account for Resource Domain - this is used for all other servers except Master Domain
        TF_VAR_ADMIN_ACCOUNT        = credentials("ADMIN_ACCOUNT_${env.BRANCH_NAME}")
        //The Admin Account is used for the Domain Safe Mode Password, Domain Join, and VM local admin.
        DomainJoinCreds             = credentials("ADMIN_ACCOUNT_${env.BRANCH_NAME}")
        ADConfigCreds               = credentials("ADMIN_ACCOUNT_${env.BRANCH_NAME}")

        // Admin Creds for Master Domain
        ADMasterConfigCreds          = credentials("MasterDomainAdminCreds_${env.BRANCH_NAME}")

        // Accounts specific to Waldo Framework
        SQLServiceCreds             = credentials("SQLServiceCreds_${env.BRANCH_NAME}")
        SQLAgentCreds               = credentials("SQLAgentCreds_${env.BRANCH_NAME}")
        SchedTaskCreds              = credentials("SchedTaskCreds_${env.BRANCH_NAME}")
        SPMgtCreds                  = credentials("SPMgtCreds_${env.BRANCH_NAME}")
        SPPassphraseCreds           = credentials("SPPassphraseCreds_${env.BRANCH_NAME}")
        SPAppCreds                  = credentials("SPAppCreds_${env.BRANCH_NAME}")
        SPWebCreds                  = credentials("SPWebCreds_${env.BRANCH_NAME}")
        // XUser creds are sourced from the same Jenkins credential, as the same user is created in both domains
        XUser1Creds                  = credentials("XUserCreds_${env.BRANCH_NAME}")
        XUser2Creds                  = credentials("XUserCreds_${env.BRANCH_NAME}")

        /*
            Web hooks to the predefined MS Teams channels
             - MSTeamsWebhookUrl is the channel to be used when the Offering execute the pipeline
             - MSTeamsWebhookUrl_DEV is the channel to be used when the Develop team execute the pipeline
             - Developer_Branches is a list of branch names used only by developers. Typically (but not always) the MSDN subscriptions.
        */
        MSTEAMS_WEBHOOKURL          = credentials("MSTeamsWebhookUrl")
        MSTEAMS_WEBHOOKURL_DEV      = credentials("MSTeamsWebhookUrl_DEV")
        DEVELOPER_BRANCHES          = credentials("Developer_Branches")

        // Get the Credential variable which indicates if a pipeline should run ("yes") or is disabled ("no")
        RUN_PIPELINE                = credentials("pipeline_enabled_${env.BRANCH_NAME}")

        /*
          Credentials to access the GitHub repo using the REST API
          Uses a Jenkins credential called "GIT_ACCOUNT" and creates environment variables:
          "$GIT_ACCOUNT" will contain string "USR:PSW"
          "$GIT_ACCOUNT_USR" will contain string for Username
          "$GIT_ACCOUNT_PSW" will contain string for Password
        */
        GIT_ACCOUNT = credentials("GIT_ACCOUNT")
    }

    // Keep Build history upto 10 days.
    // Keep last 10 build artifacts at a time.
    // Ads Build Time stamp to log file.
    // Disable concurrent builds.
    // Set generous timeout to give the pipeline enough time to complete
    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
        disableConcurrentBuilds()
        timeout(time: 4, unit: 'HOURS')
        parallelsAlwaysFailFast()
    }
    // Stage names
    // Use X.0 for a main stage or a parallel separator stage
    // Use X.X for sub stages or parallel stages
    stages {
        stage('1.0 Configuration Stages') {
            stages {
                stage('1.1 Set up Workspace') {
                    steps {
                       script {
                            // Global variable for Root folder where automation related code resides.
                            // Typically the root of the GitHub repo
                            // Cant make these CommonGlobals as they are used to load them.

                            //Globals.RootPipelineFolder = "${WORKSPACE}"
			    Globals.RootPipelineFolder = "${WORKSPACE}/Dev-Studio-Waldo-MWS-Pipeline"
                            Globals.JenkinsRootFolder = "${Globals.RootPipelineFolder}/Jenkins-Gallery"
                            Globals.JenkinsPowerShellFolder = "${Globals.JenkinsRootFolder}/Jenkins/PowerShell"
                            Globals.RootFolder = "${WORKSPACE}"
                               
                               
                            def RetryAttempt = 0

                            retry (Globals.NumberOfRuns) {
                                // retry this step if it fails the first time
                                if (RetryAttempt > 0) {
                                    echo 'The Set up Workspace stage retry count is: ' + RetryAttempt
                                }
                                RetryAttempt = RetryAttempt + 1

                                 // Download required common GitHub repositories
                               

                               			sh "pwsh -File '/${Globals.RootFolder}/PullFromGitHub.ps1' -GitRepo 'workplace/Dev-Studio-Waldo-MWS-Pipeline' -ReleaseId 'beta1.5.0' -GitHubAPIKey '${env.GIT_ACCOUNT}' -TargetFolder '${Globals.RootFolder}' " 
                                sh "pwsh -File '/${Globals.RootPipelineFolder}/PowerShell/PullFromGitHub.ps1' -GitRepo 'workplace/Jenkins-Gallery' -ReleaseId '2.2.1' -GitHubAPIKey '${env.GIT_ACCOUNT}' -TargetFolder '${Globals.RootPipelineFolder}' "

                            }
                           
                        }
                    }
                }

        stage('3.0 GitHub Release') {
           
            steps {
                script {
				withCredentials([usernamePassword(credentialsId: 'GIT_ACCOUNT', passwordVariable: 'GIT_ACCOUNT_PSW', usernameVariable: 'GIT_ACCOUNT_USR')]) {
				sh '''
				git config --global user.email '${env.BRANCH_NAME}@dxc.com'
				git config --global user.name '${env.BRANCH_NAME}'
				NEXTVERSION=`git describe --tags --always`
				VERSION=$(echo $NEXTVERSION | awk -F. -v OFS=. '{print $1"."$2"."$3+1}')
				echo $VERSION $BUILD_NUMBER
				git tag -a $VERSION -m "Tag created by Jenkins Build Number = > $BUILD_NUMBER"
				git push --tag https://${GIT_ACCOUNT_USR}:${GIT_ACCOUNT_PSW}@github.dxc.com/workplace/Dev-Studio-Waldo-MWS-FrW
				'''		  
}
                    
					
                }
            }
        }
        
            }
        }
	}
}
